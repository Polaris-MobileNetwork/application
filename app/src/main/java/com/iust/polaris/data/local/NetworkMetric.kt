package com.iust.polaris.data.local

import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Represents a single data point of collected network metrics.
 * This class defines a table named "network_metrics" in the database.
 *
 * @param id Unique identifier for the record, auto-generated by the database.
 * @param timestamp The time the measurement was taken (e.g., in milliseconds).
 *
 * User Location:
 * @param latitude The geographical latitude at the time of measurement.
 * @param longitude The geographical longitude at the time of measurement.
 *
 * Cellular Technology:
 * @param networkType The type of network (e.g., "LTE", "WIFI", "5G", "HSPA", "UMTS", "EDGE", "GPRS", "GSM").
 *
 * Cell Location Identifiers:
 * @param plmnId The Public Land Mobile Network Identifier (e.g., MCC-MNC).
 * @param lac The Location Area Code (for 2G/3G networks).
 * @param tac The Tracking Area Code (for 4G/5G networks).
 * @param rac The Routing Area Code (relevant for GPRS).
 * @param cellId The Cell Identifier (e.g., CI for 2G/3G, ECI for 4G, NCI for 5G).
 *
 * Frequency Information:
 * @param arfcn Absolute Radio Frequency Channel Number.
 * @param frequencyBand The operating frequency band (e.g., "Band 3", "2100 MHz").
 * @param actualFrequencyMhz The actual downlink or uplink frequency in MHz, if derivable from ARFCN.
 *
 * Signal Strength and Quality (Technology Dependent):
 * @param signalStrength A general signal strength value, often in dBm or ASU. Can be the primary reported strength.
 * @param rsrp Reference Signal Received Power (for LTE/5G).
 * @param rsrq Reference Signal Received Quality (for LTE/5G).
 * @param rscp Received Signal Code Power (for UMTS/HSPA).
 * @param ecno Ec/No, the ratio of received energy per chip to noise spectral density (for UMTS/HSPA).
 * @param rxlev Received Signal Level (for GSM/GPRS/EDGE).
 *
 * Upload Status:
 * @param isUploaded A flag to track if this data point has been sent to the server.
 */
@Entity(tableName = "network_metrics")
data class NetworkMetric(
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0,
    val timestamp: Long,

    // Location
    val latitude: Double?,
    val longitude: Double?,

    // Network Technology
    val networkType: String,

    // Cell Identifiers
    val plmnId: String?,
    val lac: Int?,
    val tac: Int?,
    val rac: Int?,
    val cellId: String?,

    // Frequency Information
    val arfcn: Int?,
    val frequencyBand: String?,
    val actualFrequencyMhz: Double?,

    // Signal Strength & Quality (nullable as they are technology-specific)
    val signalStrength: Int,
    val rsrp: Int?,
    val rsrq: Int?,
    val rscp: Int?,
    val ecno: Double?,
    val rxlev: Int?,

    // Sync status
    val isUploaded: Boolean = false
)
